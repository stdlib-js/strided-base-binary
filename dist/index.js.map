{
  "version": 3,
  "sources": ["../lib/binary.ndarray.js", "../lib/binary.js", "../lib/accessors.ndarray.js", "../lib/accessors.js", "../lib/main.js", "../lib/ndarray.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to strided input array elements and assigns results to elements in a strided output array.\n*\n* @private\n* @param {ArrayLikeObject<Collection>} arrays - array-like object containing two input arrays and one output array\n* @param {NonNegativeIntegerArray} shape - array-like object containing a single element, the number of indexed elements\n* @param {IntegerArray} strides - array-like object containing the stride lengths for the input and output arrays\n* @param {NonNegativeIntegerArray} offsets - array-like object containing the starting indices (i.e., index offsets) for the input and output arrays\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var add = require( '@stdlib/math-base-ops-add' );\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var z = new Float64Array( x.length );\n*\n* var shape = [ x.length ];\n* var strides = [ 1, 1, 1 ];\n* var offsets = [ 0, 0, 0 ];\n*\n* binary( [ x, y, z ], shape, strides, offsets, add );\n*\n* console.log( z );\n* // => <Float64Array>[ 2.0, 4.0, 6.0, 8.0, 10.0 ]\n*/\nfunction binary( arrays, shape, strides, offsets, fcn ) {\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar x;\n\tvar y;\n\tvar z;\n\tvar N;\n\tvar i;\n\n\tN = shape[ 0 ];\n\tif ( N <= 0 ) {\n\t\treturn;\n\t}\n\tix = offsets[ 0 ];\n\tiy = offsets[ 1 ];\n\tiz = offsets[ 2 ];\n\tsx = strides[ 0 ];\n\tsy = strides[ 1 ];\n\tsz = strides[ 2 ];\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\tz = arrays[ 2 ];\n\tfor ( i = 0; i < N; i++ ) {\n\t\tz[ iz ] = fcn( x[ ix ], y[ iy ] );\n\t\tix += sx;\n\t\tiy += sy;\n\t\tiz += sz;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = binary;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar stride2offset = require( '@stdlib/strided-base-stride2offset' );\nvar ndarray = require( './binary.ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to strided input array elements and assigns results to elements in a strided output array.\n*\n* @private\n* @param {ArrayLikeObject<Collection>} arrays - array-like object containing two input arrays and one output array\n* @param {NonNegativeIntegerArray} shape - array-like object containing a single element, the number of indexed elements\n* @param {IntegerArray} strides - array-like object containing the stride lengths for the input and output arrays\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var add = require( '@stdlib/math-base-ops-add' );\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var z = new Float64Array( x.length );\n*\n* var shape = [ x.length ];\n* var strides = [ 1, 1, 1 ];\n*\n* binary( [ x, y, z ], shape, strides, add );\n*\n* console.log( z );\n* // => <Float64Array>[ 2.0, 4.0, 6.0, 8.0, 10.0 ]\n*/\nfunction binary( arrays, shape, strides, fcn ) {\n\tvar offsets;\n\tvar N;\n\n\tN = shape[ 0 ];\n\toffsets = [\n\t\tstride2offset( N, strides[ 0 ] ),\n\t\tstride2offset( N, strides[ 1 ] ),\n\t\tstride2offset( N, strides[ 2 ] )\n\t];\n\treturn ndarray( arrays, shape, strides, offsets, fcn );\n}\n\n\n// EXPORTS //\n\nmodule.exports = binary;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Applies a binary callback to strided input array elements and assigns results to elements in a strided output array.\n*\n* @private\n* @param {ArrayLikeObject<Collection>} arrays - array-like object containing two input arrays and one output array\n* @param {NonNegativeIntegerArray} shape - array-like object containing a single element, the number of indexed elements\n* @param {IntegerArray} strides - array-like object containing the stride lengths for the input and output arrays\n* @param {NonNegativeIntegerArray} offsets - array-like object containing the starting indices (i.e., index offsets) for the input and output arrays\n* @param {Array<Function>} accessors - array-like object containing accessors for the input and output arrays\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var add = require( '@stdlib/math-base-ops-add' );\n*\n* function get( buf, idx ) {\n*     return buf[ idx ] * 2.0;\n* }\n*\n* function set( buf, idx, value ) {\n*     buf[ idx ] = value;\n* }\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var z = new Float64Array( x.length );\n*\n* var shape = [ x.length ];\n* var strides = [ 1, 1, 1 ];\n* var offsets = [ 0, 0, 0 ];\n*\n* binary( [ x, y, z ], shape, strides, offsets, [ get, get, set ], add );\n*\n* console.log( z );\n* // => <Float64Array>[ 4.0, 8.0, 12.0, 16.0, 20.0 ]\n*/\nfunction binary( arrays, shape, strides, offsets, accessors, fcn ) {\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar sx;\n\tvar sy;\n\tvar sz;\n\tvar ix;\n\tvar iy;\n\tvar iz;\n\tvar x;\n\tvar y;\n\tvar z;\n\tvar N;\n\tvar i;\n\n\tN = shape[ 0 ];\n\tif ( N <= 0 ) {\n\t\treturn;\n\t}\n\tix = offsets[ 0 ];\n\tiy = offsets[ 1 ];\n\tiz = offsets[ 2 ];\n\tsx = strides[ 0 ];\n\tsy = strides[ 1 ];\n\tsz = strides[ 2 ];\n\tx = arrays[ 0 ];\n\ty = arrays[ 1 ];\n\tz = arrays[ 2 ];\n\txget = accessors[ 0 ];\n\tyget = accessors[ 1 ];\n\tzset = accessors[ 2 ];\n\tfor ( i = 0; i < N; i++ ) {\n\t\tzset( z, iz, fcn( xget( x, ix ), yget( y, iy ) ) );\n\t\tix += sx;\n\t\tiy += sy;\n\t\tiz += sz;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = binary;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar stride2offset = require( '@stdlib/strided-base-stride2offset' );\nvar ndarray = require( './accessors.ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to strided input array elements and assigns results to elements in a strided output array.\n*\n* @private\n* @param {ArrayLikeObject<Collection>} arrays - array-like object containing two input arrays and one output array\n* @param {NonNegativeIntegerArray} shape - array-like object containing a single element, the number of indexed elements\n* @param {IntegerArray} strides - array-like object containing the stride lengths for the input and output arrays\n* @param {Array<Function>} accessors - array-like object containing accessors for the input and output arrays\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var add = require( '@stdlib/math-base-ops-add' );\n*\n* function get( buf, idx ) {\n*     return buf[ idx ] * 2.0;\n* }\n*\n* function set( buf, idx, value ) {\n*     buf[ idx ] = value;\n* }\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var z = new Float64Array( x.length );\n*\n* var shape = [ x.length ];\n* var strides = [ 1, 1, 1 ];\n*\n* binary( [ x, y, z ], shape, strides, [ get, get, set ], add );\n*\n* console.log( z );\n* // => <Float64Array>[ 4.0, 8.0, 12.0, 16.0, 20.0 ]\n*/\nfunction binary( arrays, shape, strides, accessors, fcn ) {\n\tvar offsets;\n\tvar N;\n\n\tN = shape[ 0 ];\n\toffsets = [\n\t\tstride2offset( N, strides[ 0 ] ),\n\t\tstride2offset( N, strides[ 1 ] ),\n\t\tstride2offset( N, strides[ 2 ] )\n\t];\n\treturn ndarray( arrays, shape, strides, offsets, accessors, fcn );\n}\n\n\n// EXPORTS //\n\nmodule.exports = binary;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isAccessorArray = require( '@stdlib/array-base-assert-is-accessor-array' );\nvar accessorGetter = require( '@stdlib/array-base-accessor-getter' );\nvar accessorSetter = require( '@stdlib/array-base-accessor-setter' );\nvar getter = require( '@stdlib/array-base-getter' );\nvar setter = require( '@stdlib/array-base-setter' );\nvar dtype = require( '@stdlib/array-dtype' );\nvar strided = require( './binary.js' );\nvar accessors = require( './accessors.js' );\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to strided input array elements and assigns results to elements in a strided output array.\n*\n* @param {ArrayLikeObject<Collection>} arrays - array-like object containing two input arrays and one output array\n* @param {NonNegativeIntegerArray} shape - array-like object containing a single element, the number of indexed elements\n* @param {IntegerArray} strides - array-like object containing the stride lengths for the input and output arrays\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var add = require( '@stdlib/math-base-ops-add' );\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var z = new Float64Array( x.length );\n*\n* var shape = [ x.length ];\n* var strides = [ 1, 1, 1 ];\n*\n* binary( [ x, y, z ], shape, strides, add );\n*\n* console.log( z );\n* // => <Float64Array>[ 2.0, 4.0, 6.0, 8.0, 10.0 ]\n*/\nfunction binary( arrays, shape, strides, fcn ) {\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar x;\n\tvar y;\n\tvar z;\n\n\tx = arrays[ 0 ];\n\tif ( isAccessorArray( x ) ) {\n\t\txget = accessorGetter( dtype( x ) );\n\t}\n\ty = arrays[ 1 ];\n\tif ( isAccessorArray( y ) ) {\n\t\tyget = accessorGetter( dtype( y ) );\n\t}\n\tz = arrays[ 2 ];\n\tif ( isAccessorArray( z ) ) {\n\t\tzset = accessorSetter( dtype( z ) );\n\t}\n\tif ( xget || yget || zset ) {\n\t\txget = xget || getter( dtype( x ) );\n\t\tyget = yget || getter( dtype( y ) );\n\t\tzset = zset || setter( dtype( z ) );\n\t\treturn accessors( arrays, shape, strides, [ xget, yget, zset ], fcn );\n\t}\n\treturn strided( arrays, shape, strides, fcn );\n}\n\n\n// EXPORTS //\n\nmodule.exports = binary;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isAccessorArray = require( '@stdlib/array-base-assert-is-accessor-array' );\nvar accessorGetter = require( '@stdlib/array-base-accessor-getter' );\nvar accessorSetter = require( '@stdlib/array-base-accessor-setter' );\nvar getter = require( '@stdlib/array-base-getter' );\nvar setter = require( '@stdlib/array-base-setter' );\nvar dtype = require( '@stdlib/array-dtype' );\nvar strided = require( './binary.ndarray.js' );\nvar accessors = require( './accessors.ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Applies a binary callback to strided input array elements and assigns results to elements in a strided output array.\n*\n* @param {ArrayLikeObject<Collection>} arrays - array-like object containing two input arrays and one output array\n* @param {NonNegativeIntegerArray} shape - array-like object containing a single element, the number of indexed elements\n* @param {IntegerArray} strides - array-like object containing the stride lengths for the input and output arrays\n* @param {NonNegativeIntegerArray} offsets - array-like object containing the starting indices (i.e., index offsets) for the input and output arrays\n* @param {Callback} fcn - binary callback\n* @returns {void}\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var add = require( '@stdlib/math-base-ops-add' );\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var z = new Float64Array( x.length );\n*\n* var shape = [ x.length ];\n* var strides = [ 1, 1, 1 ];\n* var offsets = [ 0, 0, 0 ];\n*\n* binary( [ x, y, z ], shape, strides, offsets, add );\n*\n* console.log( z );\n* // => <Float64Array>[ 2.0, 4.0, 6.0, 8.0, 10.0 ]\n*/\nfunction binary( arrays, shape, strides, offsets, fcn ) {\n\tvar xget;\n\tvar yget;\n\tvar zset;\n\tvar x;\n\tvar y;\n\tvar z;\n\n\tx = arrays[ 0 ];\n\tif ( isAccessorArray( x ) ) {\n\t\txget = accessorGetter( dtype( x ) );\n\t}\n\ty = arrays[ 1 ];\n\tif ( isAccessorArray( y ) ) {\n\t\tyget = accessorGetter( dtype( y ) );\n\t}\n\tz = arrays[ 2 ];\n\tif ( isAccessorArray( z ) ) {\n\t\tzset = accessorSetter( dtype( z ) );\n\t}\n\tif ( xget || yget || zset ) {\n\t\txget = xget || getter( dtype( x ) );\n\t\tyget = yget || getter( dtype( y ) );\n\t\tzset = zset || setter( dtype( z ) );\n\t\treturn accessors( arrays, shape, strides, offsets, [ xget, yget, zset ], fcn ); // eslint-disable-line max-len\n\t}\n\treturn strided( arrays, shape, strides, offsets, fcn );\n}\n\n\n// EXPORTS //\n\nmodule.exports = binary;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Apply a binary callback to strided input array elements and assign results to elements in a strided output array.\n*\n* @module @stdlib/strided-base-binary\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var binary = require( '@stdlib/strided-base-binary' );\n* var add = require( '@stdlib/math-base-ops-add' );\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var z = new Float64Array( x.length );\n*\n* var shape = [ x.length ];\n* var strides = [ 1, 1, 1 ];\n*\n* binary( [ x, y, z ], shape, strides, add );\n*\n* console.log( z );\n* // => <Float64Array>[ 2.0, 4.0, 6.0, 8.0, 10.0 ]\n*\n* @example\n* var Float64Array = require( '@stdlib/array-float64' );\n* var binary = require( '@stdlib/strided-base-binary' );\n* var add = require( '@stdlib/math-base-ops-add' );\n*\n* var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n* var z = new Float64Array( x.length );\n*\n* var shape = [ x.length ];\n* var strides = [ 1, 1, 1 ];\n* var offsets = [ 0, 0, 0 ];\n*\n* binary.ndarray( [ x, y, z ], shape, strides, offsets, add );\n*\n* console.log( z );\n* // => <Float64Array>[ 2.0, 4.0, 6.0, 8.0, 10.0 ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_binary_ndarray", "__commonJSMin", "exports", "module", "binary", "arrays", "shape", "strides", "offsets", "fcn", "sx", "sy", "sz", "ix", "iy", "iz", "x", "y", "z", "N", "i", "require_binary", "__commonJSMin", "exports", "module", "stride2offset", "ndarray", "binary", "arrays", "shape", "strides", "fcn", "offsets", "N", "require_accessors_ndarray", "__commonJSMin", "exports", "module", "binary", "arrays", "shape", "strides", "offsets", "accessors", "fcn", "xget", "yget", "zset", "sx", "sy", "sz", "ix", "iy", "iz", "x", "y", "z", "N", "i", "require_accessors", "__commonJSMin", "exports", "module", "stride2offset", "ndarray", "binary", "arrays", "shape", "strides", "accessors", "fcn", "offsets", "N", "require_main", "__commonJSMin", "exports", "module", "isAccessorArray", "accessorGetter", "accessorSetter", "getter", "setter", "dtype", "strided", "accessors", "binary", "arrays", "shape", "strides", "fcn", "xget", "yget", "zset", "x", "y", "z", "require_ndarray", "__commonJSMin", "exports", "module", "isAccessorArray", "accessorGetter", "accessorSetter", "getter", "setter", "dtype", "strided", "accessors", "binary", "arrays", "shape", "strides", "offsets", "fcn", "xget", "yget", "zset", "x", "y", "z", "setReadOnly", "main", "ndarray"]
}
